package scalan.sql

import java.lang.reflect.Method
import scalan._
import scalan.sql.parser.SqlAST._
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait ScannablesAbs extends Scalan with Scannables {
  self: ScannablesDsl with ScalanSql =>

  // single proxy for each type family
  implicit def proxyScannable[Row](p: Rep[Scannable[Row]]): Scannable[Row] = {
    proxyOps[Scannable[Row]](p)(scala.reflect.classTag[Scannable[Row]])
  }

  // familyElem
  class ScannableElem[Row, To <: Scannable[Row]](implicit _eRow: Elem[Row])
    extends EntityElem[To] {
    def eRow = _eRow
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs("Row" -> eRow)
    override def isEntityType = true
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[Scannable[Row]].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[Scannable[Row]] => convertScannable(x) }
      tryConvert(element[Scannable[Row]], this, x, conv)
    }

    def convertScannable(x: Rep[Scannable[Row]]): Rep[To] = {
      x.selfType1 match {
        case _: ScannableElem[_, _] => x.asRep[To]
        case e => !!!(s"Expected $x to have ScannableElem[_, _], but got $e", x)
      }
    }

    override def getDefaultRep: Rep[To] = ???
  }

  implicit def scannableElement[Row](implicit eRow: Elem[Row]): Elem[Scannable[Row]] =
    cachedElem[ScannableElem[Row, Scannable[Row]]](eRow)

  implicit case object ScannableCompanionElem extends CompanionElem[ScannableCompanionAbs] {
    lazy val tag = weakTypeTag[ScannableCompanionAbs]
    protected def getDefaultRep = Scannable
  }

  abstract class ScannableCompanionAbs extends CompanionDef[ScannableCompanionAbs] {
    def selfType = ScannableCompanionElem
    override def toString = "Scannable"
  }
  def Scannable: Rep[ScannableCompanionAbs]
  implicit def proxyScannableCompanionAbs(p: Rep[ScannableCompanionAbs]): ScannableCompanionAbs =
    proxyOps[ScannableCompanionAbs](p)

  abstract class AbsTableScannable[Row]
      (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends TableScannable[Row](table, scanId, direction, fakeDep) with Def[TableScannable[Row]] {
    lazy val selfType = element[TableScannable[Row]]
  }
  // elem for concrete class
  class TableScannableElem[Row](val iso: Iso[TableScannableData[Row], TableScannable[Row]])(implicit override val eRow: Elem[Row])
    extends ScannableElem[Row, TableScannable[Row]]
    with ConcreteElem[TableScannableData[Row], TableScannable[Row]] {
    override lazy val parent: Option[Elem[_]] = Some(scannableElement(element[Row]))
    override lazy val typeArgs = TypeArgs("Row" -> eRow)

    override def convertScannable(x: Rep[Scannable[Row]]) = // Converter is not generated by meta
!!!("Cannot convert from Scannable to TableScannable: missing fields List(table, scanId, direction, fakeDep)")
    override def getDefaultRep = TableScannable(element[Table].defaultRepValue, 0, element[SortDirection].defaultRepValue, 0)
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[TableScannable[Row]]
    }
  }

  // state representation type
  type TableScannableData[Row] = (Table, (Int, (SortDirection, Int)))

  // 3) Iso for concrete class
  class TableScannableIso[Row](implicit eRow: Elem[Row])
    extends EntityIso[TableScannableData[Row], TableScannable[Row]] with Def[TableScannableIso[Row]] {
    override def from(p: Rep[TableScannable[Row]]) =
      (p.table, p.scanId, p.direction, p.fakeDep)
    override def to(p: Rep[(Table, (Int, (SortDirection, Int)))]) = {
      val Pair(table, Pair(scanId, Pair(direction, fakeDep))) = p
      TableScannable(table, scanId, direction, fakeDep)
    }
    lazy val eFrom = pairElement(element[Table], pairElement(element[Int], pairElement(element[SortDirection], element[Int])))
    lazy val eTo = new TableScannableElem[Row](self)
    lazy val selfType = new TableScannableIsoElem[Row](eRow)
    def productArity = 1
    def productElement(n: Int) = eRow
  }
  case class TableScannableIsoElem[Row](eRow: Elem[Row]) extends Elem[TableScannableIso[Row]] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new TableScannableIso[Row]()(eRow))
    lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[TableScannableIso[Row]]
    }
    lazy val typeArgs = TypeArgs("Row" -> eRow)
  }
  // 4) constructor and deconstructor
  class TableScannableCompanionAbs extends CompanionDef[TableScannableCompanionAbs] {
    def selfType = TableScannableCompanionElem
    override def toString = "TableScannable"
    @scalan.OverloadId("fromData")
    def apply[Row](p: Rep[TableScannableData[Row]])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
      isoTableScannable(eRow).to(p)
    @scalan.OverloadId("fromFields")
    def apply[Row](table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
      mkTableScannable(table, scanId, direction, fakeDep)

    def unapply[Row](p: Rep[Scannable[Row]]) = unmkTableScannable(p)
  }
  lazy val TableScannableRep: Rep[TableScannableCompanionAbs] = new TableScannableCompanionAbs
  lazy val TableScannable: TableScannableCompanionAbs = proxyTableScannableCompanion(TableScannableRep)
  implicit def proxyTableScannableCompanion(p: Rep[TableScannableCompanionAbs]): TableScannableCompanionAbs = {
    proxyOps[TableScannableCompanionAbs](p)
  }

  implicit case object TableScannableCompanionElem extends CompanionElem[TableScannableCompanionAbs] {
    lazy val tag = weakTypeTag[TableScannableCompanionAbs]
    protected def getDefaultRep = TableScannable
  }

  implicit def proxyTableScannable[Row](p: Rep[TableScannable[Row]]): TableScannable[Row] =
    proxyOps[TableScannable[Row]](p)

  implicit class ExtendedTableScannable[Row](p: Rep[TableScannable[Row]])(implicit eRow: Elem[Row]) {
    def toData: Rep[TableScannableData[Row]] = isoTableScannable(eRow).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoTableScannable[Row](implicit eRow: Elem[Row]): Iso[TableScannableData[Row], TableScannable[Row]] =
    reifyObject(new TableScannableIso[Row]()(eRow))

  // 6) smart constructor and deconstructor
  def mkTableScannable[Row](table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]]
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]): Option[(Rep[Table], Rep[Int], Rep[SortDirection], Rep[Int])]

  abstract class AbsIndexScannable[Row]
      (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends IndexScannable[Row](table, index, scanId, direction, fakeDep) with Def[IndexScannable[Row]] {
    lazy val selfType = element[IndexScannable[Row]]
  }
  // elem for concrete class
  class IndexScannableElem[Row](val iso: Iso[IndexScannableData[Row], IndexScannable[Row]])(implicit override val eRow: Elem[Row])
    extends ScannableElem[Row, IndexScannable[Row]]
    with ConcreteElem[IndexScannableData[Row], IndexScannable[Row]] {
    override lazy val parent: Option[Elem[_]] = Some(scannableElement(element[Row]))
    override lazy val typeArgs = TypeArgs("Row" -> eRow)

    override def convertScannable(x: Rep[Scannable[Row]]) = // Converter is not generated by meta
!!!("Cannot convert from Scannable to IndexScannable: missing fields List(table, index, scanId, direction, fakeDep)")
    override def getDefaultRep = IndexScannable(element[Table].defaultRepValue, element[Index].defaultRepValue, 0, element[SortDirection].defaultRepValue, 0)
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[IndexScannable[Row]]
    }
  }

  // state representation type
  type IndexScannableData[Row] = (Table, (Index, (Int, (SortDirection, Int))))

  // 3) Iso for concrete class
  class IndexScannableIso[Row](implicit eRow: Elem[Row])
    extends EntityIso[IndexScannableData[Row], IndexScannable[Row]] with Def[IndexScannableIso[Row]] {
    override def from(p: Rep[IndexScannable[Row]]) =
      (p.table, p.index, p.scanId, p.direction, p.fakeDep)
    override def to(p: Rep[(Table, (Index, (Int, (SortDirection, Int))))]) = {
      val Pair(table, Pair(index, Pair(scanId, Pair(direction, fakeDep)))) = p
      IndexScannable(table, index, scanId, direction, fakeDep)
    }
    lazy val eFrom = pairElement(element[Table], pairElement(element[Index], pairElement(element[Int], pairElement(element[SortDirection], element[Int]))))
    lazy val eTo = new IndexScannableElem[Row](self)
    lazy val selfType = new IndexScannableIsoElem[Row](eRow)
    def productArity = 1
    def productElement(n: Int) = eRow
  }
  case class IndexScannableIsoElem[Row](eRow: Elem[Row]) extends Elem[IndexScannableIso[Row]] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new IndexScannableIso[Row]()(eRow))
    lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[IndexScannableIso[Row]]
    }
    lazy val typeArgs = TypeArgs("Row" -> eRow)
  }
  // 4) constructor and deconstructor
  class IndexScannableCompanionAbs extends CompanionDef[IndexScannableCompanionAbs] {
    def selfType = IndexScannableCompanionElem
    override def toString = "IndexScannable"
    @scalan.OverloadId("fromData")
    def apply[Row](p: Rep[IndexScannableData[Row]])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
      isoIndexScannable(eRow).to(p)
    @scalan.OverloadId("fromFields")
    def apply[Row](table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
      mkIndexScannable(table, index, scanId, direction, fakeDep)

    def unapply[Row](p: Rep[Scannable[Row]]) = unmkIndexScannable(p)
  }
  lazy val IndexScannableRep: Rep[IndexScannableCompanionAbs] = new IndexScannableCompanionAbs
  lazy val IndexScannable: IndexScannableCompanionAbs = proxyIndexScannableCompanion(IndexScannableRep)
  implicit def proxyIndexScannableCompanion(p: Rep[IndexScannableCompanionAbs]): IndexScannableCompanionAbs = {
    proxyOps[IndexScannableCompanionAbs](p)
  }

  implicit case object IndexScannableCompanionElem extends CompanionElem[IndexScannableCompanionAbs] {
    lazy val tag = weakTypeTag[IndexScannableCompanionAbs]
    protected def getDefaultRep = IndexScannable
  }

  implicit def proxyIndexScannable[Row](p: Rep[IndexScannable[Row]]): IndexScannable[Row] =
    proxyOps[IndexScannable[Row]](p)

  implicit class ExtendedIndexScannable[Row](p: Rep[IndexScannable[Row]])(implicit eRow: Elem[Row]) {
    def toData: Rep[IndexScannableData[Row]] = isoIndexScannable(eRow).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoIndexScannable[Row](implicit eRow: Elem[Row]): Iso[IndexScannableData[Row], IndexScannable[Row]] =
    reifyObject(new IndexScannableIso[Row]()(eRow))

  // 6) smart constructor and deconstructor
  def mkIndexScannable[Row](table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]]
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]): Option[(Rep[Table], Rep[Index], Rep[Int], Rep[SortDirection], Rep[Int])]

  registerModule(Scannables_Module)
}

// Std -----------------------------------
trait ScannablesStd extends ScalanStd with ScannablesDsl {
  self: ScannablesDsl with ScalanSqlStd =>

  lazy val Scannable: Rep[ScannableCompanionAbs] = new ScannableCompanionAbs {
  }

  case class StdTableScannable[Row]
      (override val table: Rep[Table], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends AbsTableScannable[Row](table, scanId, direction, fakeDep) {
  }

  def mkTableScannable[Row]
    (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
    new StdTableScannable[Row](table, scanId, direction, fakeDep)
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]) = p match {
    case p: TableScannable[Row] @unchecked =>
      Some((p.table, p.scanId, p.direction, p.fakeDep))
    case _ => None
  }

  case class StdIndexScannable[Row]
      (override val table: Rep[Table], override val index: Rep[Index], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends AbsIndexScannable[Row](table, index, scanId, direction, fakeDep) {
  }

  def mkIndexScannable[Row]
    (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
    new StdIndexScannable[Row](table, index, scanId, direction, fakeDep)
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]) = p match {
    case p: IndexScannable[Row] @unchecked =>
      Some((p.table, p.index, p.scanId, p.direction, p.fakeDep))
    case _ => None
  }
}

// Exp -----------------------------------
trait ScannablesExp extends ScalanExp with ScannablesDsl {
  self: ScannablesDsl with ScalanSqlExp =>

  lazy val Scannable: Rep[ScannableCompanionAbs] = new ScannableCompanionAbs {
  }

  case class ExpTableScannable[Row]
      (override val table: Rep[Table], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends AbsTableScannable[Row](table, scanId, direction, fakeDep)

  object TableScannableMethods {
  }

  def mkTableScannable[Row]
    (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
    new ExpTableScannable[Row](table, scanId, direction, fakeDep)
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: TableScannableElem[Row] @unchecked =>
      Some((p.asRep[TableScannable[Row]].table, p.asRep[TableScannable[Row]].scanId, p.asRep[TableScannable[Row]].direction, p.asRep[TableScannable[Row]].fakeDep))
    case _ =>
      None
  }

  case class ExpIndexScannable[Row]
      (override val table: Rep[Table], override val index: Rep[Index], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Int])(implicit eRow: Elem[Row])
    extends AbsIndexScannable[Row](table, index, scanId, direction, fakeDep)

  object IndexScannableMethods {
    object search {
      def unapply(d: Def[_]): Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}] = d match {
        case MethodCall(receiver, method, Seq(bounds, _*), _) if receiver.elem.isInstanceOf[IndexScannableElem[_]] && method.getName == "search" =>
          Some((receiver, bounds)).asInstanceOf[Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  def mkIndexScannable[Row]
    (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Int])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
    new ExpIndexScannable[Row](table, index, scanId, direction, fakeDep)
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: IndexScannableElem[Row] @unchecked =>
      Some((p.asRep[IndexScannable[Row]].table, p.asRep[IndexScannable[Row]].index, p.asRep[IndexScannable[Row]].scanId, p.asRep[IndexScannable[Row]].direction, p.asRep[IndexScannable[Row]].fakeDep))
    case _ =>
      None
  }

  object ScannableMethods {
    object fullScan {
      def unapply(d: Def[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[ScannableElem[_, _]] && method.getName == "fullScan" =>
          Some(receiver).asInstanceOf[Option[Rep[Scannable[Row]] forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }
}

object Scannables_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAAOVWTYgcRRSunp3J7PwY19XICgbXdaISdWYxSIRFwpqZyIbJ7LC9MTIGpaa7ZtJJdXVtd83a42EFDzn4AyLBg+AhoHgJgnhTCIIKIiLo1bOnGAk5mJPiq+qf+dntybrqyTkUNV2v3s/3vlfvXbmOMp6LHvYMTDEr20Tgsq72y54o6TUmLNE/5Zg9Sqqk8+NjXzr5199qpNBMC+07h72qR1soF2xqPo/3ujDrKIeZQTzhuJ5AD9aVhYrhUEoMYTmsYtl2T+A2JZW65YmlOkq3HbO/gbaQVkczhsMMlwiiH6fY84gXfp8m0iMr/p9T//urfGCDVWQUlaEo1l1sCXAfbMwE8muE633msL4t0P7QtVUu3QKZAvE5xLBic6rMTNVR1rK544rIahYsnHPM6G+aYfiAZuvn8SaugNVuRReuxbpSGcfGBdwlDRCR4mmIwSO0s97nJFRe8IQ5Ys/nCCHIypPKsfIAs3KMWVliVtKJa2FqvYrlYdN1/D4KftoUQj4HFY/fRkWkgdSYWXrjrPHiLb1gp+RlX7qSVQ7tA0UPJDBEpQew/XbtXe/mc5ePplC+hfKWt9z2hIsNMUyDEK4CZswRyucYQex2IYMLSRlUVpZBZowmOcOxOWagKcSyCImilmEJKSy/FcP0JGCfFZxEoprPtTje+YR4FZeOY0qb1+574tCvtRdSKDVqIgcqdSgGN1IqUA4UMCZBD/XL9U6BptacVxTMcsn5gzU7wYMYi0eu/WZ+s4jOpmIEQ4O7SxqomH36/c8PkeYnKTTdUhw/QXFXpU9CVCWe0ULTziZxg+/ZTUzlbscUZk3SwT0qQmCHEZkCRASaTyxPTiRcS4r2WhR+IWBuw2GkdKJZ+l3/7tIVSUwXFYOToF7/tI7+8fP+jlCcFSgjYpQVvoSPIp5Zl+dDmKuDudiwXA4KkIeErZg76HHRQ0nM4KTpWja8Tpvkqa++OH3jaiOjyDEbIvM8pj0SPAwhMAOQpO/aIlhaYWKSYznTcoNCTo7xDh2eqmokd9tYsx18AXLNtyuUy+Ft1FTXlMCBIbtz2pjaNAFyRzrTNUrsXXAfXmOVoLheBsYk9AeToQc237tWv4deP3Y1hTInUaYDRPXqKNN2esyMXgfoKoL44tnomzZKVHgNsIvtqI6Ct3QeKSeUr9vcVqIFbTS0PZT7NjjHs/QvETtjMZP4E9SsyPO918cQZf6vBFYI7khguVZ3QaqhYCe94tFY8+nFiwdufPjy3ar1TrctYWNeWvwbjVfui/9tY0Vj2IHb/7BmRionlgiSN9Jy954BuW4F112UD7qO7tjkroWb1kuX3xSq8Wr+6OS32j4PvF1Sl++He+WE7FWJQbFLTDn2ERvG0iAvR947dubk3JnTSnfRVELBSdxBdx6iT2G+pEa+RyeMfCBUqtkcRnrYHPn6mZ9e+/7jj1TrHCAoUH6QCxHGzcreRjCdvg0mFhJi0kMOQHa3bn3QOPzDZ7+oDpiXbIJGzuIJerjzjRd/bByG4kGOQ46AKX2DDqUKalNSL/RNru/I5dJfcfwN4NoMAAA="
}
}

