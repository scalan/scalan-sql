package scalan.sql

import java.lang.reflect.Method
import scalan._
import scalan.sql.parser.SqlAST._
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait ScannablesAbs extends Scalan with Scannables {
  self: ScannablesDsl with ScalanSql =>

  // single proxy for each type family
  implicit def proxyScannable[Row](p: Rep[Scannable[Row]]): Scannable[Row] = {
    proxyOps[Scannable[Row]](p)(scala.reflect.classTag[Scannable[Row]])
  }

  // familyElem
  class ScannableElem[Row, To <: Scannable[Row]](implicit _eRow: Elem[Row])
    extends EntityElem[To] {
    def eRow = _eRow
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs("Row" -> eRow)
    override def isEntityType = true
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[Scannable[Row]].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[Scannable[Row]] => convertScannable(x) }
      tryConvert(element[Scannable[Row]], this, x, conv)
    }

    def convertScannable(x: Rep[Scannable[Row]]): Rep[To] = {
      x.selfType1 match {
        case _: ScannableElem[_, _] => x.asRep[To]
        case e => !!!(s"Expected $x to have ScannableElem[_, _], but got $e", x)
      }
    }

    override def getDefaultRep: Rep[To] = ???
  }

  implicit def scannableElement[Row](implicit eRow: Elem[Row]): Elem[Scannable[Row]] =
    cachedElem[ScannableElem[Row, Scannable[Row]]](eRow)

  implicit case object ScannableCompanionElem extends CompanionElem[ScannableCompanionAbs] {
    lazy val tag = weakTypeTag[ScannableCompanionAbs]
    protected def getDefaultRep = Scannable
  }

  abstract class ScannableCompanionAbs extends CompanionDef[ScannableCompanionAbs] {
    def selfType = ScannableCompanionElem
    override def toString = "Scannable"
  }
  def Scannable: Rep[ScannableCompanionAbs]
  implicit def proxyScannableCompanionAbs(p: Rep[ScannableCompanionAbs]): ScannableCompanionAbs =
    proxyOps[ScannableCompanionAbs](p)

  abstract class AbsTableScannable[Row]
      (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends TableScannable[Row](table, scanId, direction, fakeDep, kernelInput) with Def[TableScannable[Row]] {
    lazy val selfType = element[TableScannable[Row]]
  }
  // elem for concrete class
  class TableScannableElem[Row](val iso: Iso[TableScannableData[Row], TableScannable[Row]])(implicit override val eRow: Elem[Row])
    extends ScannableElem[Row, TableScannable[Row]]
    with ConcreteElem[TableScannableData[Row], TableScannable[Row]] {
    override lazy val parent: Option[Elem[_]] = Some(scannableElement(element[Row]))
    override lazy val typeArgs = TypeArgs("Row" -> eRow)

    override def convertScannable(x: Rep[Scannable[Row]]) = // Converter is not generated by meta
!!!("Cannot convert from Scannable to TableScannable: missing fields List(table, scanId, direction, fakeDep, kernelInput)")
    override def getDefaultRep = TableScannable(element[Table].defaultRepValue, 0, element[SortDirection].defaultRepValue, (), element[KernelInput].defaultRepValue)
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[TableScannable[Row]]
    }
  }

  // state representation type
  type TableScannableData[Row] = (Table, (Int, (SortDirection, (Unit, KernelInput))))

  // 3) Iso for concrete class
  class TableScannableIso[Row](implicit eRow: Elem[Row])
    extends EntityIso[TableScannableData[Row], TableScannable[Row]] with Def[TableScannableIso[Row]] {
    override def from(p: Rep[TableScannable[Row]]) =
      (p.table, p.scanId, p.direction, p.fakeDep, p.kernelInput)
    override def to(p: Rep[(Table, (Int, (SortDirection, (Unit, KernelInput))))]) = {
      val Pair(table, Pair(scanId, Pair(direction, Pair(fakeDep, kernelInput)))) = p
      TableScannable(table, scanId, direction, fakeDep, kernelInput)
    }
    lazy val eFrom = pairElement(element[Table], pairElement(element[Int], pairElement(element[SortDirection], pairElement(element[Unit], element[KernelInput]))))
    lazy val eTo = new TableScannableElem[Row](self)
    lazy val selfType = new TableScannableIsoElem[Row](eRow)
    def productArity = 1
    def productElement(n: Int) = eRow
  }
  case class TableScannableIsoElem[Row](eRow: Elem[Row]) extends Elem[TableScannableIso[Row]] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new TableScannableIso[Row]()(eRow))
    lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[TableScannableIso[Row]]
    }
    lazy val typeArgs = TypeArgs("Row" -> eRow)
  }
  // 4) constructor and deconstructor
  class TableScannableCompanionAbs extends CompanionDef[TableScannableCompanionAbs] {
    def selfType = TableScannableCompanionElem
    override def toString = "TableScannable"
    @scalan.OverloadId("fromData")
    def apply[Row](p: Rep[TableScannableData[Row]])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
      isoTableScannable(eRow).to(p)
    @scalan.OverloadId("fromFields")
    def apply[Row](table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
      mkTableScannable(table, scanId, direction, fakeDep, kernelInput)

    def unapply[Row](p: Rep[Scannable[Row]]) = unmkTableScannable(p)
  }
  lazy val TableScannableRep: Rep[TableScannableCompanionAbs] = new TableScannableCompanionAbs
  lazy val TableScannable: TableScannableCompanionAbs = proxyTableScannableCompanion(TableScannableRep)
  implicit def proxyTableScannableCompanion(p: Rep[TableScannableCompanionAbs]): TableScannableCompanionAbs = {
    proxyOps[TableScannableCompanionAbs](p)
  }

  implicit case object TableScannableCompanionElem extends CompanionElem[TableScannableCompanionAbs] {
    lazy val tag = weakTypeTag[TableScannableCompanionAbs]
    protected def getDefaultRep = TableScannable
  }

  implicit def proxyTableScannable[Row](p: Rep[TableScannable[Row]]): TableScannable[Row] =
    proxyOps[TableScannable[Row]](p)

  implicit class ExtendedTableScannable[Row](p: Rep[TableScannable[Row]])(implicit eRow: Elem[Row]) {
    def toData: Rep[TableScannableData[Row]] = isoTableScannable(eRow).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoTableScannable[Row](implicit eRow: Elem[Row]): Iso[TableScannableData[Row], TableScannable[Row]] =
    reifyObject(new TableScannableIso[Row]()(eRow))

  // 6) smart constructor and deconstructor
  def mkTableScannable[Row](table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]]
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]): Option[(Rep[Table], Rep[Int], Rep[SortDirection], Rep[Unit], Rep[KernelInput])]

  abstract class AbsIndexScannable[Row]
      (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends IndexScannable[Row](table, index, scanId, direction, fakeDep, kernelInput) with Def[IndexScannable[Row]] {
    lazy val selfType = element[IndexScannable[Row]]
  }
  // elem for concrete class
  class IndexScannableElem[Row](val iso: Iso[IndexScannableData[Row], IndexScannable[Row]])(implicit override val eRow: Elem[Row])
    extends ScannableElem[Row, IndexScannable[Row]]
    with ConcreteElem[IndexScannableData[Row], IndexScannable[Row]] {
    override lazy val parent: Option[Elem[_]] = Some(scannableElement(element[Row]))
    override lazy val typeArgs = TypeArgs("Row" -> eRow)

    override def convertScannable(x: Rep[Scannable[Row]]) = // Converter is not generated by meta
!!!("Cannot convert from Scannable to IndexScannable: missing fields List(table, index, scanId, direction, fakeDep, kernelInput)")
    override def getDefaultRep = IndexScannable(element[Table].defaultRepValue, element[Index].defaultRepValue, 0, element[SortDirection].defaultRepValue, (), element[KernelInput].defaultRepValue)
    override lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[IndexScannable[Row]]
    }
  }

  // state representation type
  type IndexScannableData[Row] = (Table, (Index, (Int, (SortDirection, (Unit, KernelInput)))))

  // 3) Iso for concrete class
  class IndexScannableIso[Row](implicit eRow: Elem[Row])
    extends EntityIso[IndexScannableData[Row], IndexScannable[Row]] with Def[IndexScannableIso[Row]] {
    override def from(p: Rep[IndexScannable[Row]]) =
      (p.table, p.index, p.scanId, p.direction, p.fakeDep, p.kernelInput)
    override def to(p: Rep[(Table, (Index, (Int, (SortDirection, (Unit, KernelInput)))))]) = {
      val Pair(table, Pair(index, Pair(scanId, Pair(direction, Pair(fakeDep, kernelInput))))) = p
      IndexScannable(table, index, scanId, direction, fakeDep, kernelInput)
    }
    lazy val eFrom = pairElement(element[Table], pairElement(element[Index], pairElement(element[Int], pairElement(element[SortDirection], pairElement(element[Unit], element[KernelInput])))))
    lazy val eTo = new IndexScannableElem[Row](self)
    lazy val selfType = new IndexScannableIsoElem[Row](eRow)
    def productArity = 1
    def productElement(n: Int) = eRow
  }
  case class IndexScannableIsoElem[Row](eRow: Elem[Row]) extends Elem[IndexScannableIso[Row]] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new IndexScannableIso[Row]()(eRow))
    lazy val tag = {
      implicit val tagRow = eRow.tag
      weakTypeTag[IndexScannableIso[Row]]
    }
    lazy val typeArgs = TypeArgs("Row" -> eRow)
  }
  // 4) constructor and deconstructor
  class IndexScannableCompanionAbs extends CompanionDef[IndexScannableCompanionAbs] {
    def selfType = IndexScannableCompanionElem
    override def toString = "IndexScannable"
    @scalan.OverloadId("fromData")
    def apply[Row](p: Rep[IndexScannableData[Row]])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
      isoIndexScannable(eRow).to(p)
    @scalan.OverloadId("fromFields")
    def apply[Row](table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
      mkIndexScannable(table, index, scanId, direction, fakeDep, kernelInput)

    def unapply[Row](p: Rep[Scannable[Row]]) = unmkIndexScannable(p)
  }
  lazy val IndexScannableRep: Rep[IndexScannableCompanionAbs] = new IndexScannableCompanionAbs
  lazy val IndexScannable: IndexScannableCompanionAbs = proxyIndexScannableCompanion(IndexScannableRep)
  implicit def proxyIndexScannableCompanion(p: Rep[IndexScannableCompanionAbs]): IndexScannableCompanionAbs = {
    proxyOps[IndexScannableCompanionAbs](p)
  }

  implicit case object IndexScannableCompanionElem extends CompanionElem[IndexScannableCompanionAbs] {
    lazy val tag = weakTypeTag[IndexScannableCompanionAbs]
    protected def getDefaultRep = IndexScannable
  }

  implicit def proxyIndexScannable[Row](p: Rep[IndexScannable[Row]]): IndexScannable[Row] =
    proxyOps[IndexScannable[Row]](p)

  implicit class ExtendedIndexScannable[Row](p: Rep[IndexScannable[Row]])(implicit eRow: Elem[Row]) {
    def toData: Rep[IndexScannableData[Row]] = isoIndexScannable(eRow).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoIndexScannable[Row](implicit eRow: Elem[Row]): Iso[IndexScannableData[Row], IndexScannable[Row]] =
    reifyObject(new IndexScannableIso[Row]()(eRow))

  // 6) smart constructor and deconstructor
  def mkIndexScannable[Row](table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]]
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]): Option[(Rep[Table], Rep[Index], Rep[Int], Rep[SortDirection], Rep[Unit], Rep[KernelInput])]

  registerModule(Scannables_Module)
}

// Std -----------------------------------
trait ScannablesStd extends ScalanStd with ScannablesDsl {
  self: ScannablesDsl with ScalanSqlStd =>

  lazy val Scannable: Rep[ScannableCompanionAbs] = new ScannableCompanionAbs {
  }

  case class StdTableScannable[Row]
      (override val table: Rep[Table], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Unit], override val kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends AbsTableScannable[Row](table, scanId, direction, fakeDep, kernelInput) {
  }

  def mkTableScannable[Row]
    (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
    new StdTableScannable[Row](table, scanId, direction, fakeDep, kernelInput)
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]) = p match {
    case p: TableScannable[Row] @unchecked =>
      Some((p.table, p.scanId, p.direction, p.fakeDep, p.kernelInput))
    case _ => None
  }

  case class StdIndexScannable[Row]
      (override val table: Rep[Table], override val index: Rep[Index], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Unit], override val kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends AbsIndexScannable[Row](table, index, scanId, direction, fakeDep, kernelInput) {
  }

  def mkIndexScannable[Row]
    (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
    new StdIndexScannable[Row](table, index, scanId, direction, fakeDep, kernelInput)
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]) = p match {
    case p: IndexScannable[Row] @unchecked =>
      Some((p.table, p.index, p.scanId, p.direction, p.fakeDep, p.kernelInput))
    case _ => None
  }
}

// Exp -----------------------------------
trait ScannablesExp extends ScalanExp with ScannablesDsl {
  self: ScannablesDsl with ScalanSqlExp =>

  lazy val Scannable: Rep[ScannableCompanionAbs] = new ScannableCompanionAbs {
  }

  case class ExpTableScannable[Row]
      (override val table: Rep[Table], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Unit], override val kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends AbsTableScannable[Row](table, scanId, direction, fakeDep, kernelInput)

  object TableScannableMethods {
    object sourceIter {
      def unapply(d: Def[_]): Option[Rep[TableScannable[Row]] forSome {type Row}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[TableScannableElem[_]] && method.getName == "sourceIter" =>
          Some(receiver).asInstanceOf[Option[Rep[TableScannable[Row]] forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[TableScannable[Row]] forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  def mkTableScannable[Row]
    (table: Rep[Table], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[TableScannable[Row]] =
    new ExpTableScannable[Row](table, scanId, direction, fakeDep, kernelInput)
  def unmkTableScannable[Row](p: Rep[Scannable[Row]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: TableScannableElem[Row] @unchecked =>
      Some((p.asRep[TableScannable[Row]].table, p.asRep[TableScannable[Row]].scanId, p.asRep[TableScannable[Row]].direction, p.asRep[TableScannable[Row]].fakeDep, p.asRep[TableScannable[Row]].kernelInput))
    case _ =>
      None
  }

  case class ExpIndexScannable[Row]
      (override val table: Rep[Table], override val index: Rep[Index], override val scanId: Rep[Int], override val direction: Rep[SortDirection], override val fakeDep: Rep[Unit], override val kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row])
    extends AbsIndexScannable[Row](table, index, scanId, direction, fakeDep, kernelInput)

  object IndexScannableMethods {
    // WARNING: Cannot generate matcher for method `isCovering`: Method's return type Boolean is not a Rep

    object sourceIter {
      def unapply(d: Def[_]): Option[Rep[IndexScannable[Row]] forSome {type Row}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[IndexScannableElem[_]] && method.getName == "sourceIter" =>
          Some(receiver).asInstanceOf[Option[Rep[IndexScannable[Row]] forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[IndexScannable[Row]] forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }

    object search {
      def unapply(d: Def[_]): Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}] = d match {
        case MethodCall(receiver, method, Seq(bounds, _*), _) if receiver.elem.isInstanceOf[IndexScannableElem[_]] && method.getName == "search" =>
          Some((receiver, bounds)).asInstanceOf[Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[(Rep[IndexScannable[Row]], SearchBounds) forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  def mkIndexScannable[Row]
    (table: Rep[Table], index: Rep[Index], scanId: Rep[Int], direction: Rep[SortDirection], fakeDep: Rep[Unit], kernelInput: Rep[KernelInput])(implicit eRow: Elem[Row]): Rep[IndexScannable[Row]] =
    new ExpIndexScannable[Row](table, index, scanId, direction, fakeDep, kernelInput)
  def unmkIndexScannable[Row](p: Rep[Scannable[Row]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: IndexScannableElem[Row] @unchecked =>
      Some((p.asRep[IndexScannable[Row]].table, p.asRep[IndexScannable[Row]].index, p.asRep[IndexScannable[Row]].scanId, p.asRep[IndexScannable[Row]].direction, p.asRep[IndexScannable[Row]].fakeDep, p.asRep[IndexScannable[Row]].kernelInput))
    case _ =>
      None
  }

  object ScannableMethods {
    object sourceIter {
      def unapply(d: Def[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[ScannableElem[_, _]] && method.getName == "sourceIter" =>
          Some(receiver).asInstanceOf[Option[Rep[Scannable[Row]] forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }

    object fullScan {
      def unapply(d: Def[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[ScannableElem[_, _]] && method.getName == "fullScan" =>
          Some(receiver).asInstanceOf[Option[Rep[Scannable[Row]] forSome {type Row}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[Scannable[Row]] forSome {type Row}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }
}

object Scannables_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAAN1XX2gcRRifvdz1crlYY6Q0gqUxXrUWvQsWqRJEYu+qqZdLyCZW0hKZ2527bjM7O9mdi3s+1LeC+iCIKAgKEYsvRRHfFHxRQUR88NVnn6pS+mBBUPxm9s/96e01RgXxHj5md779/vx+3zfz3ZWfUcZz0X2egSlmRZsIXNTVet4TBb3ChCXai47ZoqRMGhtPv/fbWfvlgyk0sY72ncde2aPrKBcsKj6P17owqyiHmUE84bieQPdUlYeS4VBKDGE5rGTZdkvgOiWlquWJuSpK1x2zvYUuIq2KJgyHGS4RRD9JsecRL3w/SmREVvycU8/tJd7xwUoyi1JXFqsutgSEDz4mAv0VwvU2c1jbFmh/GNoSl2GBTp74HHJYsDlVbkaqKGvZ3HFF5DULHs47ZvSYZhheoMnqBbyNS+C1WdKFa7GmNMaxsYmbpAYqUj0NOXiENlbbnITG854we/z5HCEErDysAit2MCvGmBUlZgWduBam1otYbi67jt9GwU8bQcjnYOLBW5iILJAKMwuvnDPO3tDzdkp+7MtQsiqgfWDocEKFKHoA269XXveuP7VzIoXG1tGY5c3XPeFiQ3SXQQhXHjPmCBVzjCB2m8DgTBKDyss86PSVSc5wbI4ZWAqxHAeiqGVYQirLd+MhPQnYZwUnkarmcy3OdzohX1VLJzGly1fveujIT5XnUijV6yIHJnVoBjcyKlAODDAmQQ/tS3m7QCMrzgsKZilyfkdmh0QQY3H/1V/Mr2bRuVSMYOhwd6SBiclH3/70CFn+MIVG11WNn6K4qeiTEJWJZ6yjUWebuMH77DamcjWQwqxJGrhFRQhsNyIjgIhA04ntyYmEa06VvRalnw8qt+YwUji1XPhV/+aNK7IwXTQe7AT9+od14vcf9jeEqlmBMiJGWeFLeC/imVW534W52piKHUtxSIA+ELZgDrDjonuTKoOTZdey4XTaJo988dnatc9rGVUckyEyz2LaIsHBEALTAUnGrs2CpwUmhgWWMy03aOTkHG/T4agqR3q3zDXbwJvANU8w+IBAqaMg0mvMGhpafpO4jNAFxlsiObj8Mx2twaWvzCn1A12fTml97tIEmieymq5QYu+it+C0VwUQ92PHmaT2UDK10C3soL741keHN1IocxplGtAIXhVl6k6LmdHpA7eWIL54Mnqn9TYCnDbYxXbUp8FZPY1UECrWm8JWqnmtN7U9HCc3wdnP3j/UOBmLmcQfYmZB7u+9/6Q49p9pECke+x/0hCJlYE9IWdtFnXaBMOziiSaxjy9dOnDt/efvVNPCaN0SNuaF2b8wK8j1+L87C6A+7CDsv9mGPc0YawTk9UwJe2dAyteCz100FlyUumOTO2auWxs7rwo1K2h+77C6VL8ArTCnPr4bvismsFcmBsUuMeWkSmyYpANejr/5xJnTU2fWlO1xUykFO/GlP3juX8R8Tk2pR4dMqaBUqNgc/oXA4viXj3//0rcfXFa3fQdBgcY6XIgwb1b0toKB+l1wMZOQkx7WALB78cY7tWPfffKjurTHZDXB7MHiob/7su4/T2LnMMd3OA5rBFzpW7SLKuhNWXphbFLuSHH5T5xdVD+NDQAA"
}
}

