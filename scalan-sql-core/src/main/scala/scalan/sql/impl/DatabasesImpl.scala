package scalan.sql

import java.lang.reflect.Method
import scalan._
import scalan.sql.parser.SqlAST.{Index, SortDirection, Table}
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait DatabasesAbs extends Scalan with Databases {
  self: DatabasesDsl with ScalanSql =>

  // single proxy for each type family
  implicit def proxyDatabase[S <: SSchema](p: Rep[Database[S]]): Database[S] = {
    proxyOps[Database[S]](p)(scala.reflect.classTag[Database[S]])
  }

  // familyElem
  class DatabaseElem[S <: SSchema, To <: Database[S]](implicit _eS: Elem[S])
    extends EntityElem[To] {
    def eS = _eS
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs("S" -> eS)
    override def isEntityType = true
    override lazy val tag = {
      implicit val tagS = eS.tag
      weakTypeTag[Database[S]].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[Database[S]] => convertDatabase(x) }
      tryConvert(element[Database[S]], this, x, conv)
    }

    def convertDatabase(x: Rep[Database[S]]): Rep[To] = {
      x.selfType1 match {
        case _: DatabaseElem[_, _] => x.asRep[To]
        case e => !!!(s"Expected $x to have DatabaseElem[_, _], but got $e", x)
      }
    }

    override def getDefaultRep: Rep[To] = ???
  }

  implicit def databaseElement[S <: SSchema](implicit eS: Elem[S]): Elem[Database[S]] =
    cachedElem[DatabaseElem[S, Database[S]]](eS)

  implicit case object DatabaseCompanionElem extends CompanionElem[DatabaseCompanionAbs] {
    lazy val tag = weakTypeTag[DatabaseCompanionAbs]
    protected def getDefaultRep = Database
  }

  abstract class DatabaseCompanionAbs extends CompanionDef[DatabaseCompanionAbs] {
    def selfType = DatabaseCompanionElem
    override def toString = "Database"
  }
  def Database: Rep[DatabaseCompanionAbs]
  implicit def proxyDatabaseCompanionAbs(p: Rep[DatabaseCompanionAbs]): DatabaseCompanionAbs =
    proxyOps[DatabaseCompanionAbs](p)

  abstract class AbsDatabaseImpl[S <: SSchema]
      (connectionString: Rep[String])(implicit eS: Elem[S])
    extends DatabaseImpl[S](connectionString) with Def[DatabaseImpl[S]] {
    lazy val selfType = element[DatabaseImpl[S]]
  }
  // elem for concrete class
  class DatabaseImplElem[S <: SSchema](val iso: Iso[DatabaseImplData[S], DatabaseImpl[S]])(implicit override val eS: Elem[S])
    extends DatabaseElem[S, DatabaseImpl[S]]
    with ConcreteElem[DatabaseImplData[S], DatabaseImpl[S]] {
    override lazy val parent: Option[Elem[_]] = Some(databaseElement(element[S]))
    override lazy val typeArgs = TypeArgs("S" -> eS)

    override def convertDatabase(x: Rep[Database[S]]) = // Converter is not generated by meta
!!!("Cannot convert from Database to DatabaseImpl: missing fields List(connectionString)")
    override def getDefaultRep = DatabaseImpl("")
    override lazy val tag = {
      implicit val tagS = eS.tag
      weakTypeTag[DatabaseImpl[S]]
    }
  }

  // state representation type
  type DatabaseImplData[S <: SSchema] = String

  // 3) Iso for concrete class
  class DatabaseImplIso[S <: SSchema](implicit eS: Elem[S])
    extends EntityIso[DatabaseImplData[S], DatabaseImpl[S]] with Def[DatabaseImplIso[S]] {
    override def from(p: Rep[DatabaseImpl[S]]) =
      p.connectionString
    override def to(p: Rep[String]) = {
      val connectionString = p
      DatabaseImpl(connectionString)
    }
    lazy val eFrom = element[String]
    lazy val eTo = new DatabaseImplElem[S](self)
    lazy val selfType = new DatabaseImplIsoElem[S](eS)
    def productArity = 1
    def productElement(n: Int) = eS
  }
  case class DatabaseImplIsoElem[S <: SSchema](eS: Elem[S]) extends Elem[DatabaseImplIso[S]] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new DatabaseImplIso[S]()(eS))
    lazy val tag = {
      implicit val tagS = eS.tag
      weakTypeTag[DatabaseImplIso[S]]
    }
    lazy val typeArgs = TypeArgs("S" -> eS)
  }
  // 4) constructor and deconstructor
  class DatabaseImplCompanionAbs extends CompanionDef[DatabaseImplCompanionAbs] {
    def selfType = DatabaseImplCompanionElem
    override def toString = "DatabaseImpl"

    @scalan.OverloadId("fromFields")
    def apply[S <: SSchema](connectionString: Rep[String])(implicit eS: Elem[S]): Rep[DatabaseImpl[S]] =
      mkDatabaseImpl(connectionString)

    def unapply[S <: SSchema](p: Rep[Database[S]]) = unmkDatabaseImpl(p)
  }
  lazy val DatabaseImplRep: Rep[DatabaseImplCompanionAbs] = new DatabaseImplCompanionAbs
  lazy val DatabaseImpl: DatabaseImplCompanionAbs = proxyDatabaseImplCompanion(DatabaseImplRep)
  implicit def proxyDatabaseImplCompanion(p: Rep[DatabaseImplCompanionAbs]): DatabaseImplCompanionAbs = {
    proxyOps[DatabaseImplCompanionAbs](p)
  }

  implicit case object DatabaseImplCompanionElem extends CompanionElem[DatabaseImplCompanionAbs] {
    lazy val tag = weakTypeTag[DatabaseImplCompanionAbs]
    protected def getDefaultRep = DatabaseImpl
  }

  implicit def proxyDatabaseImpl[S <: SSchema](p: Rep[DatabaseImpl[S]]): DatabaseImpl[S] =
    proxyOps[DatabaseImpl[S]](p)

  implicit class ExtendedDatabaseImpl[S <: SSchema](p: Rep[DatabaseImpl[S]])(implicit eS: Elem[S]) {
    def toData: Rep[DatabaseImplData[S]] = isoDatabaseImpl(eS).from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoDatabaseImpl[S <: SSchema](implicit eS: Elem[S]): Iso[DatabaseImplData[S], DatabaseImpl[S]] =
    reifyObject(new DatabaseImplIso[S]()(eS))

  // 6) smart constructor and deconstructor
  def mkDatabaseImpl[S <: SSchema](connectionString: Rep[String])(implicit eS: Elem[S]): Rep[DatabaseImpl[S]]
  def unmkDatabaseImpl[S <: SSchema](p: Rep[Database[S]]): Option[(Rep[String])]

  registerModule(Databases_Module)
}

// Std -----------------------------------
trait DatabasesStd extends ScalanStd with DatabasesDsl {
  self: DatabasesDsl with ScalanSqlStd =>

  lazy val Database: Rep[DatabaseCompanionAbs] = new DatabaseCompanionAbs {
  }

  case class StdDatabaseImpl[S <: SSchema]
      (override val connectionString: Rep[String])(implicit eS: Elem[S])
    extends AbsDatabaseImpl[S](connectionString) {
  }

  def mkDatabaseImpl[S <: SSchema]
    (connectionString: Rep[String])(implicit eS: Elem[S]): Rep[DatabaseImpl[S]] =
    new StdDatabaseImpl[S](connectionString)
  def unmkDatabaseImpl[S <: SSchema](p: Rep[Database[S]]) = p match {
    case p: DatabaseImpl[S] @unchecked =>
      Some((p.connectionString))
    case _ => None
  }
}

// Exp -----------------------------------
trait DatabasesExp extends ScalanExp with DatabasesDsl {
  self: DatabasesDsl with ScalanSqlExp =>

  lazy val Database: Rep[DatabaseCompanionAbs] = new DatabaseCompanionAbs {
  }

  case class ExpDatabaseImpl[S <: SSchema]
      (override val connectionString: Rep[String])(implicit eS: Elem[S])
    extends AbsDatabaseImpl[S](connectionString)

  object DatabaseImplMethods {
  }

  def mkDatabaseImpl[S <: SSchema]
    (connectionString: Rep[String])(implicit eS: Elem[S]): Rep[DatabaseImpl[S]] =
    new ExpDatabaseImpl[S](connectionString)
  def unmkDatabaseImpl[S <: SSchema](p: Rep[Database[S]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: DatabaseImplElem[S] @unchecked =>
      Some((p.asRep[DatabaseImpl[S]].connectionString))
    case _ =>
      None
  }

  object DatabaseMethods {
  }
}

object Databases_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAALVWT4hbRRyeJJtNsgl1XVlawdI1piqiSXWRCkFkbVK1ZLNhX2slLSuT9ybZV+fNm30zWV481FtBvYkoCB4qipeiiDcFLyqISA+9evZUldKDBUHxN/P+5EX2dd2DOQzzZia/P9/3zffetd9QXnjoYWFiilndIRLXDT1fE7JmtJm05WTdtcaUtMhw68WP/rzgvHk4ixb7aH4bi5agfVQKJm2fx3NDWh1UwswkQrqekOjBjs7QMF1KiSltlzVsxxlLPKCk0bGFbHbQ3MC1JjvoMsp00KLpMtMjkhinKBaCiHC9SFRFdvxc0s+TDT7NwRqqi0aii7MetiWUDzkWg/ObhBsT5rKJI9GhsLQNrsqCM2Xic+jhJYdTnSbXQQXb4a4no6wFyLDtWtHjHMOwgJY6l/AubkDWUcOQns1GKhjH5mt4RLpwRB2fgx4EocOzE07C4GUhrZl8PkcIAStP6cLqU8zqMWZ1hVnNIJ6Nqf06Vps9z/UnKPhlcgj5HEI8vk+IKAJpM6v21kXzwh2j7GTVn31VSkEXNA+BjqUoRNMD2P6w+Y64/cLVk1m00EcLtlgbCOlhUyZlEMJVxoy5UtccI4i9ETBYTWNQZ1mDM/+SScl0HY4ZRAqxrABR1DZtqQ6rtUpITwr2BclJdDTj80zc70pKv1pLpzClvZv3P3H81/YrWZSdTVGCkAZcBi8KKlGxhQFyHMp4Xo/3SJQxNMZqKPnTsXCX9DEQj9z83fr+BLqYjeELs/03xiDE0jMffHWc9D7LomJfC/w0xSPNncKnRYTZR0V3l3jBemEXUzXbk7+CRYZ4TGWIahKOHMAh0Urq3eREYdXUms9E7ZcD2XZdRmqne7U/jB/fvaZU6aFKsBNc1r/tk3/9fGgotWClNg0WyDy4fxHQObjvMS4PpTHLSc+zHXCXXfL0t1+fu/VNN6/JXQqbexnTMQkCh71N+1Tps9WqRPPTAzOcquGormE5IYIjmahpvQ8xiBEVPdemxNlXMBJVInEpA5mmUa0eTW8VBMAOG+vvf35sK4vyZ1B+CNyKDsoP3DGzotsEgEriy+ejtcwst3B7sIedSHqB96wo61oIaDJch9xbvW1vXX1baqVm/Fmf3BhcAsKaupkHojYLhmFuEwfHzRb2bH1fpUe+/8WVK8u3Pn71Pu1NxYEtHcxrJw7gTJGR/I/Og2aZzkHZsysH85BSwr6XpzhqeSQNKakXNT4Zc6ieVg/IiBqb05CrwE09hZsWMSn2iKVESxx4Kweor7733PkzR86f02KpWPpQsBN7yN7fEOuYN/Ub79G7vPHgUK3tcPiigcnqd8/eeOOnTz/R5pFsrBQjLUMds7rYoXFL1ZSWjJBgoO7ynQ+7j13/8hftHwtKKuBkLP5+SPrGLJ3xZVZfUVMKYacUZDJ2aAJ2cAklqwRZXTVs/gO2okXa1wkAAA=="
}
}

